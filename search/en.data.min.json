[{"id":0,"href":"/simpl-api-doc/introduction/","title":"Introduction","parent":"","content":""},{"id":1,"href":"/simpl-api-doc/introduction/overview/","title":"Overview","parent":"Introduction","content":" What is simpl:api ? simpl:api is a basic API builder that allows users to build an API easily for their front-end application or website. The main focus of this project is small applications and websites but also can be used for micro applications in large systems.\nThere are 5 key parts of the system. Let\u0026rsquo;s take a glance at them one by one:\nEntry Types Entry types are like classes that you give a shape in your hand. You can set its name, design its fields(object properties) as you want. For example; you can create \u0026lsquo;Animals\u0026rsquo; entry type and set \u0026lsquo;weight\u0026rsquo; and \u0026lsquo;sex\u0026rsquo; as its fields (properties) and you can restrict value type of \u0026lsquo;weight\u0026rsquo; as integer and its maximum length to 3 , similarly, you can set value type of \u0026lsquo;sex\u0026rsquo; as string and limit its length to 6.\nEntries If you think of entry types as classes, entries are objects that are derived from those classes. How you can write an entry is dependent on the structure of its entry type. Let\u0026rsquo;s continue with \u0026lsquo;Animals\u0026rsquo; example, we want to register an \u0026lsquo;Animal\u0026rsquo; to database. what we can enter is only limited to entry name, weight, and sex. Of course, weight must be integer and its maximum length is 3 and sex must be string and its maximum length is 6.\nUsers Users are designed to use the dashboard. To use API, you don\u0026rsquo;t need a user account. Each user has a permission group (user group) which can be restricted their permissions.\nPermission Groups Permission groups designed to limit permissions of users depending on necessities and use cases. Admin is special permission group which have exclusive permissions that cannot be changed whitout editing the code. Other permission group\u0026rsquo;s can be restricted by namespace (entry types). Privileges that can be restricted are Create,Read,Update,Delete.\nSettings Settings allows you to change privileges of each permission group and generate or remove API keys. Settings can only be accessed through dashboard and only admins can access this page.\n"},{"id":2,"href":"/simpl-api-doc/setup/","title":"Setup","parent":"","content":""},{"id":3,"href":"/simpl-api-doc/setup/requirements/","title":"Requirements","parent":"Setup","content":" System Requirements Node.js 12.22.0 or later MongoDB 5.0 or later "},{"id":4,"href":"/simpl-api-doc/setup/first-run/","title":"First Run","parent":"Setup","content":"Before using simpl:api, there are a few steps to follow to make everything ready.\nclone the repo In .env file (change name of .env-example to .env), set BASE_URL, MONGODB_CONNECTION_STRING and DB_NAME In .env file, set a UID to SECRET_KEYand NEXTAUTH_SECRET In next.config.js file (change name of next-example.config.js to next.config.js), set baseUrl and secretKey according to .env file. Start simpl:api with npm run dev command. In your browser, enter /api/v1/install/first-run. This will create required db collections and admin account and will return credentials to your browser as response. Delete this folder after all steps are done. In your browser, enter api/v1/key/generate. This page is protected with authentication, so you have to use your admin credentials which were created previous step. Copy generated API key from your browser and paste it to api key variable in both .env and next.config.js file Restart the server (Ctrl+C then run the command from step 5) Congratulations ! simpl:api is ready to use! (run npm run build and then npm run start ) ðŸ˜€ Change Admin credentials After completing all steps, please change admin credentials through the dashboard. Delete Installation Folder After completing all steps, please delete installation folder from /pages/api/v1/install. Don\u0026#39;t share secret key Secret key protects some senstive api routes (such as creating, editing, deleting routes), don\u0026rsquo;t share secret key that doesn\u0026rsquo;t have admin rights. "},{"id":5,"href":"/simpl-api-doc/api-endpoints/","title":"API Endpoints","parent":"","content":""},{"id":6,"href":"/simpl-api-doc/api-endpoints/entry-types/","title":"Entry Types","parent":"API Endpoints","content":" Endpoints Namespaces Namespaces are hierarchical representation of entry types. For example, articles.books means books entry type is child of articles entry types. getByLimit and getByLimit Support getByLimit support means you can add /first_X, /last_X or /random_X to end of the url to get first, last or random X results. getByIndex support means you can add /X to end of the url to get Xth result. X is Integer. Entry Types Route Description getByLimit Support getByIndex Support Example /api/v1/entry-types returns all entry types âœ” /api/v1/entry-types/:namespace returns entry types by namespace /api/v1/entry-types/articles.books.history /api/v1/entry-types/:namespace-part-1/:namespace-part-2/\u0026hellip; returns entry types by namespace but separated each part of namespace âœ” /api/v1/entry-types/articles/books/history Entry Type Route Description getByLimit Support getByIndex Support Example /api/v1/entry-type/:namespace returns an entry type by namespace /api/v1/entry-type/articles.books.history /api/v1/entry-type/:namespace-part-1/:namespace-part-2/\u0026hellip; returns an entry type by namespace but separated each part of namespace /api/v1/entry-type/articles/books/history /api/v1/entry-type/slug/:slug returns an entry type by slug /api/v1/entry-type/slug/history /api/v1/entry-type/id/:_id (mongodb id) returns an entry type by id /api/v1/entry-type/id/12e41h5ff17dd2aeb9e0a89 "},{"id":7,"href":"/simpl-api-doc/api-endpoints/entries/","title":"Entries","parent":"API Endpoints","content":" Endpoints Namespaces Namespaces are hierarchical representation of entry types. For example, articles.books means books entry type is child of articles entry types. getByLimit and getByLimit Support getByLimit support means you can add /first_X, /last_X or /random_X to end of the url to get first, last or random X results. getByIndex support means you can add /X to end of the url to get Xth result. X is Integer. Property keys and their values Property keys are changes depending on entry types and their fields that you added. Each field name is property key and its value is property value. Entries Route Description getByLimit Support getByIndex Support Example /api/v1/entries returns all entries âœ” /api/v1/entries/:namespace returns entries by namespace âœ” /api/v1/entries/articles.books.history Entry Route Description getByLimit Support getByIndex Support Example /api/v1/entry/:slug returns an entry by slug /api/v1/entry/why-should-you-read-books /api/v1/entry/:property-key/:property-value returns entries depending on a property key and value âœ” âœ” /api/v1/entry/published/true "},{"id":8,"href":"/simpl-api-doc/api-endpoints/permission-groups/","title":"Permission Groups","parent":"API Endpoints","content":" Endpoints Permission Groups Route Description getByLimit Support getByIndex Support Example /api/v1/permission-groups/ returns all permission groups Permission Group Route Description getByLimit Support getByIndex Support Example /api/v1/permission-group/:_id (mongodb id) returns a permission groups by id /api/v1/permission-group/22daa5325914d94c57a8178f "},{"id":9,"href":"/simpl-api-doc/api-endpoints/users/","title":"Users","parent":"API Endpoints","content":" Endpoints Users Route Description getByLimit Support getByIndex Support Example /api/v1/users/ returns all users âœ” /api/v1/users/:permission-group returns users by permission group /api/v1/users/member /api/v1/users/:property-key/:property-value/ returns users depending on a property key and value âœ” /api/v1/users/email/example@localhost.test Available property keys Currently available property keys for users, username,email and permission_group "},{"id":10,"href":"/simpl-api-doc/dashboard/","title":"Dashboard","parent":"","content":""},{"id":11,"href":"/simpl-api-doc/dashboard/quick-tour/","title":"Quick Tour","parent":"Dashboard","content":"Let\u0026rsquo;s take a quick tour of the dashboard and see what\u0026rsquo;s there\nEntry Types Entry types are like classes in programming which you can design its structure. While you create an entry type, you can add as many field as you like and set their form type and value type.\nOnce you create the entry type, you have to give permissions to permission groups depending on your use case. You can do this on the settings page.\nAfter giving permissions, you can go back to entry types page and click to Create Entry button to create new entry for articles entry type. Entries Entries are like objects in programming which created from classes (entry types in our case). You have to abide structure of the entry type that you going to create entry, otherwise it will give an error under the field.\nUsers You can manage users from Users page. Only admins have edit and delete permissions.\nPermission Groups Permission groups are basically user groups that allows you limit each groups permission depending on your use case. Only admins can access Permission Groups page and can create, edit and delete a permission group. By default, there are two permission group which are Admin and Member. Also each permission group has no any privilege by default but admins has some exceptional privileges which cannot be removed without editing the code.\nSettings Settings page allows you manage privileges of each permission group and create or delete API keys.\nPermissions Read : Doesn\u0026rsquo;t do anything in dashboard but you can use it in your front-end application. Create : This permission allows a permission group to create an entry for selected namespace (entry type) Update : This permission allows a permission group to update selected namespace and its entries. Delete : This permission allows a permission group to delete selected namespace and its entries. Admin Exclusive Permissions Creating, Editing, deleting users Accessing Permission Groups page Creating, Editing and deleting a permission group Accessing Settings page "},{"id":12,"href":"/simpl-api-doc/","title":"","parent":"","content":" What is simpl:api ? simpl:api is a basic API builder that allows users to build an API easily for their front-end application or website. The main focus of this project is small applications and websites but also can be used for micro applications in large systems.\nDownload. "},{"id":13,"href":"/simpl-api-doc/tags/","title":"Tags","parent":"","content":""}]