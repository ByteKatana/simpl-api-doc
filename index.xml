<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>simpl:api Doc</title><link>https://bytekatana.github.io/simpl-api-doc/</link><description>Recent content on simpl:api Doc</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 25 Aug 2022 02:39:41 +0300</lastBuildDate><atom:link href="https://bytekatana.github.io/simpl-api-doc/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>https://bytekatana.github.io/simpl-api-doc/introduction/overview/</link><pubDate>Fri, 26 Aug 2022 15:40:03 +0300</pubDate><guid>https://bytekatana.github.io/simpl-api-doc/introduction/overview/</guid><description>What is simpl:api ? simpl:api is a basic API builder that allows users to build an API easily for their front-end application or website. The main focus of this project is small applications and websites but also can be used for micro applications in large systems.
There are 5 key parts of the system. Let&amp;rsquo;s take a glance at them one by one:
Entry Types Entry types are like classes that you give a shape in your hand.</description></item><item><title>Requirements</title><link>https://bytekatana.github.io/simpl-api-doc/setup/requirements/</link><pubDate>Fri, 26 Aug 2022 15:42:59 +0300</pubDate><guid>https://bytekatana.github.io/simpl-api-doc/setup/requirements/</guid><description> System Requirements Node.js 12.22.0 or later MongoDB 5.0 or later</description></item><item><title>First Run</title><link>https://bytekatana.github.io/simpl-api-doc/setup/first-run/</link><pubDate>Fri, 26 Aug 2022 15:45:55 +0300</pubDate><guid>https://bytekatana.github.io/simpl-api-doc/setup/first-run/</guid><description>Before using simpl:api, there are a few steps to follow to make everything ready.
clone the repo In .env file (change name of .env-example to .env), set BASE_URL, MONGODB_CONNECTION_STRING and DB_NAME In .env file, set a UID to SECRET_KEYand NEXTAUTH_SECRET In next.config.js file (change name of next-example.config.js to next.config.js), set baseUrl and secretKey according to .env file. Start simpl:api with npm run dev command. In your browser, enter /api/v1/install/first-run. This will create required db collections and admin account and will return credentials to your browser as response.</description></item><item><title>Entry Types</title><link>https://bytekatana.github.io/simpl-api-doc/api-endpoints/entry-types/</link><pubDate>Thu, 25 Aug 2022 02:49:37 +0300</pubDate><guid>https://bytekatana.github.io/simpl-api-doc/api-endpoints/entry-types/</guid><description>Endpoints Namespaces Namespaces are hierarchical representation of entry types. For example, articles.books means books entry type is child of articles entry types. getByLimit and getByLimit Support getByLimit support means you can add /first_X, /last_X or /random_X to end of the url to get first, last or random X results. getByIndex support means you can add /X to end of the url to get Xth result. X is Integer. Entry Types Route Description getByLimit Support getByIndex Support Example /api/v1/entry-types returns all entry types ✔ /api/v1/entry-types/:namespace returns entry types by namespace /api/v1/entry-types/articles.</description></item><item><title>Entries</title><link>https://bytekatana.github.io/simpl-api-doc/api-endpoints/entries/</link><pubDate>Mon, 29 Aug 2022 12:56:41 +0300</pubDate><guid>https://bytekatana.github.io/simpl-api-doc/api-endpoints/entries/</guid><description>Endpoints Namespaces Namespaces are hierarchical representation of entry types. For example, articles.books means books entry type is child of articles entry types. getByLimit and getByLimit Support getByLimit support means you can add /first_X, /last_X or /random_X to end of the url to get first, last or random X results. getByIndex support means you can add /X to end of the url to get Xth result. X is Integer. Property keys and their values Property keys are changes depending on entry types and their fields that you added.</description></item><item><title>Permission Groups</title><link>https://bytekatana.github.io/simpl-api-doc/api-endpoints/permission-groups/</link><pubDate>Mon, 29 Aug 2022 13:49:45 +0300</pubDate><guid>https://bytekatana.github.io/simpl-api-doc/api-endpoints/permission-groups/</guid><description> Endpoints Permission Groups Route Description getByLimit Support getByIndex Support Example /api/v1/permission-groups/ returns all permission groups Permission Group Route Description getByLimit Support getByIndex Support Example /api/v1/permission-group/:_id (mongodb id) returns a permission groups by id /api/v1/permission-group/22daa5325914d94c57a8178f</description></item><item><title>Users</title><link>https://bytekatana.github.io/simpl-api-doc/api-endpoints/users/</link><pubDate>Mon, 29 Aug 2022 13:49:31 +0300</pubDate><guid>https://bytekatana.github.io/simpl-api-doc/api-endpoints/users/</guid><description> Endpoints Users Route Description getByLimit Support getByIndex Support Example /api/v1/users/ returns all users ✔ /api/v1/users/:permission-group returns users by permission group /api/v1/users/member /api/v1/users/:property-key/:property-value/ returns users depending on a property key and value ✔ /api/v1/users/email/example@localhost.test Available property keys Currently available property keys for users, username,email and permission_group</description></item><item><title>Quick Tour</title><link>https://bytekatana.github.io/simpl-api-doc/dashboard/quick-tour/</link><pubDate>Mon, 29 Aug 2022 14:28:25 +0300</pubDate><guid>https://bytekatana.github.io/simpl-api-doc/dashboard/quick-tour/</guid><description>Let&amp;rsquo;s take a quick tour of the dashboard and see what&amp;rsquo;s there
Entry Types Entry types are like classes in programming which you can design its structure. While you create an entry type, you can add as many field as you like and set their form type and value type.
Once you create the entry type, you have to give permissions to permission groups depending on your use case. You can do this on the settings page.</description></item></channel></rss>